#!/bin/sh

this_script=$(basename $(realpath $0))
lib_dir="$(dirname $(realpath $0))/../lib/onie"

args="qhv"

usage()
{
    echo "usage: $this_script [-hvq]"
    cat <<EOF
Regenerate the final GRUB configuration file from fragments.

COMMAND LINE OPTIONS

	-h
		Help.  Print this message.

	-q
		Quiet.  No printing, except for errors.

	-v
		Be verbose.  Print what is happening.
EOF
}

quiet=no
verbose=no
cmd_verbose=

while getopts "$args" a ; do
    case $a in
        h)
            usage
            exit 0
            ;;
        v)
            verbose=yes
            cmd_verbose=-v
            ;;
        q)
            quiet=yes
            ;;
        *)
            echo "Unknown argument: $a"
            usage
            exit 1
    esac
done

[ "$verbose" = "yes" ] && quiet=no

[ -r "$lib_dir/onie-blkdev-common" ] || {
    echo "ERROR: Unable to find onie-blkdev-common"
    exit 1
}
. $lib_dir/onie-blkdev-common

[ "$verbose" = "yes" ] && echo "Mounting ONIE partitions ..."
onie_mount_partitions || {
    echo "ERROR: Unable to mount ONIE partitions"
    exit 1
}

# Construct the grub.cfg file from fragments

# Verify the required fragments exist
for f in \
    $onie_boot_mnt/grub/grub-common.cfg \
    $onie_boot_mnt/grub/grub-onie.cfg ; do 
      [ -r "$f" ] || {
          echo "ERROR: Unable to read config fragment: $f"
          exit 1
      }
done

grub_cfg="$(mktemp)"
(cat <<EOF
#
# DO NOT EDIT THIS FILE
#
# It is automatically generated by $this_script using fragments
# from ONIE-CONFIG/grub.d 
#
# Genreated on $(date)
#
EOF
) > $grub_cfg

cat $onie_boot_mnt/grub/grub-machine.cfg >> $grub_cfg
cat $onie_boot_mnt/grub/grub-common.cfg  >> $grub_cfg
cat $onie_config_mnt/grub.d/*            >> $grub_cfg

onie_mode_file="$onie_config_mnt/onie_boot_reason"
user_default_file="$onie_config_mnt/onie_default"
if [ -r "$onie_mode_file" ] ; then
    # The ONIE boot mode takes precedence
    echo "# default from ONIE boot mode"    >> $grub_cfg
    echo "default="'"${onie_submenu}>${onie_menu_'"$(cat $onie_mode_file)"'}"' >> $grub_cfg
else
    if [ -r "$user_default_file" ] ; then
        echo "# default from User menu default"    >> $grub_cfg
        echo "default="'"'"$(cat $user_default_file)"'"' >> $grub_cfg
    fi
fi

cat $onie_boot_mnt/grub/grub-onie.cfg    >> $grub_cfg

onie_grub_cfg="${onie_config_mnt}/grub.cfg"

# Save existing config file
[ -r "$onie_grub_cfg" ] && {
    [ "$verbose" = "yes" ] && echo "Backing up existing configuration to ${onie_grub_cfg}.bak"
    mv -f "$onie_grub_cfg" "${onie_grub_cfg}.bak"
}

mv $grub_cfg $onie_grub_cfg

# Find first menuentry
first_img=$(grep menuentry "$onie_grub_cfg" | head -n 1 | sed -e "s/^[^'\"]*['\"]//" -e "s/['\"].*$//")

# Find default image -- grub.cfg is constructed so that the effective
# 'set default=' line appears last, even if the user manages to
# specify earlier definitions.  Hence the use of 'tail -n 1' here.
default_img=$(grep default= "$onie_grub_cfg" | tail -n 1 | sed -e 's/set//' -e 's/.*default=//' -e "s/['\"]//g")
if [ -z "$default_img" ] ; then
    echo "WARNING: No defaut image specified.  Using first menu entry."
    default_img="$first_img"
fi

[ "$quiet" = "no" ] && echo "Default boot image: $default_img"

[ "$verbose" = "yes" ] && echo "Un-mounting ONIE partitions ..."
onie_umount_partitions

[ "$quiet" = "no" ] && echo "Success: ONIE boot configuration updated."
exit 0
